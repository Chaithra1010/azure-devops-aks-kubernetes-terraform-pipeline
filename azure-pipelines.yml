
trigger:
- master

pool:
  vmImage: ubuntu-latest

# Stage-1: Terraform Validate Stage
## Step-1: Publish Artifacts to Pipeline (Pipeline artifacts provide a way to share files between stages in a pipeline or between different pipelines. )
## Step-2: Install Latest Terraform (0.13.5) (Ideally not needed if we use default Ubuntu Agents)
## Step-3: Validate Terraform Manifests (terraform init, terraform validate)

stages:
  - stage: Terraformvalidate
    jobs:
    - job: TerraformvalidateJob
      continueOnError: false
      steps:
      - task: PublishPipelineArtifact@1
        displayName: Publishartifact
        inputs:
         targetPath: '$(System.DefaultWorkingDirectory)/terraform-manifests'
         artifact: 'terraform-manifest-out'
         publishLocation: 'pipeline'
      - task: TerraformInstaller@0
        displayName: Terraform Installer
        inputs:
          terraformVersion: 'latest'
      - task: TerraformCLI@0
        displayName: Terraform Init
        inputs:
          command: 'init'
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-manifests'
          backendType: 'azurerm'
          backendServiceArm: 'terraform-aks-azurerm-svc-con'
          backendAzureRmSubscriptionId: '4cd8ed55-121e-4457-b098-c309b363fe96'
          backendAzureRmResourceGroupName: 'terraform-storage-rg'
          backendAzureRmStorageAccountName: 'terraformstatestoragenew'
          backendAzureRmContainerName: 'tfstatefile'
          backendAzureRmKey: 'aks-base.tfstate'
          allowTelemetryCollection: false
      - task: TerraformCLI@0
        displayName: Terraform Validate
        inputs:
          command: 'validate'
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-manifests'
          allowTelemetryCollection: false
